#include <DHT.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>

//Provide the token generation process info.
#include "addons/TokenHelper.h"

//Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "naveen_tharak_"
#define WIFI_PASSWORD "1234567890ntv"

// Insert Firebase project API Key
#define API_KEY "AIzaSyDzOB9WgB8TE6437HM3Jo8xKMleoB7V5fI"

// Insert RTDB URLefine the RTDB URL */
#define DATABASE_URL "dht22-e1dd6-default-rtdb.firebaseio.com/"

//Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

//unsigned long sendDataPrevMillis = 0;

//int count = 0;
bool signupOK = false;

#define DHTPIN 4       // DHT11 data pin 4 is connected to GPIO
#define DHTTYPE DHT22  // DHT11 sensor type
DHT dht(DHTPIN, DHTTYPE);

// Define the ADC pins for Relay sensor data
const int relay = 26;



// Define the ADC pins for reading the soil moisture sensor data
const int moistureSensorPin1 = 34;
const int moistureSensorPin2 = 35;
const int moistureSensorPin3 = 32;
const int moistureSensorPin4 = 33;

// The pin number for the water sensor
const int waterPin = 27;

// Values for Soil
int soil_para_dry = 1600;
int soil_para_normal = 1500;

void setup() {

  Serial.begin(115200);
  dht.begin();
  pinMode(relay, OUTPUT);
  pinMode(waterPin, INPUT);

  //Wifi Setup
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }

  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("ok");
    signupOK = true;
  } else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback;  //see addons/TokenHelper.h

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop() {


  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
    
    Serial.print("Temperature: ");
    Serial.println(temperature);

    Serial.print("Humidity: ");
    Serial.println(humidity);
  


  int value1 = analogRead(moistureSensorPin1);
  Serial.println("Soil M-1");
  Serial.println(value1);
  Serial.println("______________________________");

  int value2 = analogRead(moistureSensorPin2);
  Serial.println("Soil M-2");
  Serial.println(value2);
  Serial.println("______________________________");

  int value3 = analogRead(moistureSensorPin3);
  Serial.println("Soil M-3");
  Serial.println(value3);
  Serial.println("______________________________");

  int value4 = analogRead(moistureSensorPin4);
  Serial.println("Soil M-4");
  Serial.println(value4);
  Serial.println("______________________________");

  int tot_soil = (value1 + value2 + value3 + value4);
  int avg_soil = tot_soil / 4;

  Serial.println("Average Soil");
  Serial.println(avg_soil);
  Serial.println("______________________________");






  // Normally Open configuration, send HIGH signal stop current flow

  if (temperature > 20) {
    if (avg_soil > soil_para_dry) {
      digitalWrite(relay, LOW);
      Serial.println("It's hot day.");
      Serial.println("Water pump is on");
      Serial.println("______________________________");

    }

    else if (avg_soil < soil_para_dry) {
      // Normally Open configuration, send HIGH signal stop current flow
      digitalWrite(relay, HIGH);
      Serial.println("It's hot day.");
      Serial.println("Water pump is off");
      Serial.println("______________________________");
    }
  }


  if (temperature < 20) {
    // Normally Open configuration, send HIGH signal stop current flow
    if (avg_soil > soil_para_dry) {
      digitalWrite(relay, LOW);
      Serial.println("It's cold day.");
      Serial.println("Water pump is on");
      Serial.println("______________________________");


    } else if (avg_soil < soil_para_dry) {
      // Normally Open configuration, send HIGH signal stop current flow
      // (if you're usong Normally Closed configuration send LOW signal)
      digitalWrite(relay, HIGH);
      Serial.println("It's cold day.");
      Serial.println("Water pump is off");
      Serial.println("______________________________");
    }
  }

  delay(10000);

  // Initialize the path variable
  String path = "";


  // Convert the soil value to a string
  String temperatureStr = String(temperature)+"Â°C";

  // Convert the soil value to a string
  String humidityStr = String(humidity)+"%";

  // Convert the soil value to a string
  String Soil1 = String(value1);

  // Convert the soil value to a string
  String Soil2 = String(value2);

  // Convert the soil value to a string
  String Soil3 = String(value3);

  // Convert the soil value to a string
  String Soil4 = String(value4);

  // Get the current time as a timestamp and store the temperature value under a child node named with the timestamp and the "temperature" child node
  time_t now = time(nullptr);

  // Get the current time as a timestamp
  path = String(now) + "/temp";

  // Set the path to include the timestamp and the "temperature" child node
  if (Firebase.RTDB.setString(&fbdo, path.c_str(), temperatureStr.c_str())) {
   
  } else {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }

  // Get the current time as a timestamp
  path = String(now) + "/humidity";

  // Set the path to include the timestamp and the "humidity" child node
  if (Firebase.RTDB.setString(&fbdo, path.c_str(), humidityStr.c_str())) {
   
  } else {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }



  Serial.println("______________________________");
}
